<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HonorsApplication_II.Pages.Tasks"
             xmlns:viewmodel="clr-namespace:HonorsApplication_II.ViewModels"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:models="clr-namespace:HonorsApplication_II.ProgramClasses"
             x:DataType="viewmodel:TasksViewModel"
             Title="{Binding CurrentProject.projectName}">

    <!--Controls the Backbutton Navigation Behaviour-->
    <Shell.BackButtonBehavior>
        <BackButtonBehavior Command="{Binding ReturnCommand}"
                        IconOverride="back.png" />
    </Shell.BackButtonBehavior>


    <!-- Allows the user to Scroll Form this point -->
    <ScrollView HorizontalOptions="Center">

        <!--Grid that holds Frames/CollectionViews in place-->
        <Grid 
            RowDefinitions="Auto,Auto,Auto,*,Auto"
            ColumnDefinitions=".01*, .98*, .01*" 
            Padding="10"
            RowSpacing="10"
            ColumnSpacing="10">

            <!--Frame that holds the "Doing" Header-->
            <Frame Grid.Column="1" Grid.Row="0" BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10">

                <Grid
                    ColumnDefinitions=".1*,.8*,.1*"
                    Padding="5"
                    ColumnSpacing="5">

                    <Label Text="Doing" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1" FontAttributes="Bold"/>

                    <Label Text="{Binding DoingTasks.Count}" BackgroundColor="Transparent" Grid.Column="0" FontAttributes="Bold"/>

                    <Button ImageSource="ic_fluent_info_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}" Command="{Binding DoingInfoCommand}" MaximumHeightRequest="30"/>

                </Grid>

                <!--GestserReconizer that tells when something was dropped over it-->
                <Frame.GestureRecognizers>
                    <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="Doing"/>
                </Frame.GestureRecognizers>

            </Frame>

            <!--CollectionView that displays all the "Doing"-->
            <CollectionView ItemsSource="{Binding DoingTasks}" Grid.Column="1" Grid.Row="1" CanReorderItems="True">

                <!--Outlines the template used to display the tasks-->
                <CollectionView.ItemTemplate>


                    <DataTemplate x:DataType="models:Task">

                        <Frame Padding="0,5" BackgroundColor="Transparent">

                            <!--GestureResconisers to set the what happens if the Frame is Dragged/Dropped or Tapped on-->
                            <Frame.GestureRecognizers>

                                <DragGestureRecognizer CanDrag="True" 
                                                       DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedCommand}" 
                                                       DragStartingCommandParameter="{Binding .}"
                                                       />

                                <DropGestureRecognizer AllowDrop="True" 
                                                       DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedOverCommand}"
                                                       DropCommandParameter="{Binding .}"
                                                       />

                                <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskPressedCommand}"
                                                      CommandParameter="{Binding .}"/>

                            </Frame.GestureRecognizers>

                            <!--Triggers that change the colour of the background based on the taskDeadlineColour Value-->
                            <Frame.Triggers>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Red">
                                    <Setter Property="BackgroundColor" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Yellow">
                                    <Setter Property="BackgroundColor" Value="Orange"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Green">
                                    <Setter Property="BackgroundColor" Value="LightGreen"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="None">
                                    <Setter Property="BackgroundColor" Value="Transparent"/>
                                </DataTrigger>


                            </Frame.Triggers>

                            <!--Grid that displays all the Data of the task-->
                            <Grid 
                               RowDefinitions="25"
                               ColumnDefinitions=".4*,.45*,.15*"
                                
                               Padding="5"
                               RowSpacing="5"
                               ColumnSpacing="5">

                                <Label Text="{Binding taskName}" FontAttributes="Bold" BackgroundColor="Transparent"/>

                                <Label Text="{Binding taskDaysLeft}" Grid.Column="1" BackgroundColor="Transparent"/>

                                <Button ImageSource="ic_fluent_options_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}"
                                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskOptionsCommand}" CommandParameter="{Binding .}"/>

                            </Grid>

                        </Frame>

                    </DataTemplate>

                </CollectionView.ItemTemplate>

            </CollectionView>

            <!--Frame that holds the "To-Do" Header-->
            <Frame Grid.Column="1" Grid.Row="2" BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10">

                <Grid
                    ColumnDefinitions=".1*,.8*,.1*"
                    Padding="5"
                    ColumnSpacing="5">

                    <Label Text="To-Do" HorizontalOptions="Center" FontAttributes="Bold" BackgroundColor="Transparent" Grid.Column="1"/>

                    <Label Text="{Binding TodoTasks.Count}" BackgroundColor="Transparent" FontAttributes="Bold"/>

                    <Button ImageSource="ic_fluent_info_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}" Command="{Binding ToDoInfoCommand}" MaximumHeightRequest="30"/>

                </Grid>
                <!--GestserReconizer that tells when something was dropped over it-->
                <Frame.GestureRecognizers>
                    <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="To-Do"/>
                </Frame.GestureRecognizers>

            </Frame>

            <!--GestserReconizer that tells when something was dropped over it-->
            <CollectionView ItemsSource="{Binding TodoTasks}" Grid.Column="1" Grid.Row="3" CanReorderItems="True">

        
                <CollectionView.ItemTemplate>


                    <DataTemplate x:DataType="models:Task">

                        <Frame Padding="0,5" BackgroundColor="Transparent">

                            <!--GestureResconisers to set the what happens if the Frame is Dragged/Dropped or Tapped on-->
                            <Frame.GestureRecognizers>

                                <DragGestureRecognizer CanDrag="True" 
                                   DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedCommand}" 
                                   DragStartingCommandParameter="{Binding .}"
                                   />

                                <DropGestureRecognizer AllowDrop="True" 
                                   DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedOverCommand}"
                                   DropCommandParameter="{Binding .}"
                                   />

                                <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskPressedCommand}"
                                  CommandParameter="{Binding .}"/>

                            </Frame.GestureRecognizers>

                            <!--Triggers that change the colour of the background based on the taskDeadlineColour Value-->
                            <Frame.Triggers>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Red">
                                    <Setter Property="BackgroundColor" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Yellow">
                                    <Setter Property="BackgroundColor" Value="Orange"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Green">
                                    <Setter Property="BackgroundColor" Value="LightGreen"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="None">
                                    <Setter Property="BackgroundColor" Value="Transparent"/>
                                </DataTrigger>


                            </Frame.Triggers>

                            <!--Grid that displays all the Data of the task-->
                            <Grid 
                                RowDefinitions="25"
                                ColumnDefinitions=".4*,.45*,.15*"
                                Padding="5"
                                RowSpacing="5"
                                ColumnSpacing="5">

                                <Label Text="{Binding taskName}" FontAttributes="Bold" BackgroundColor="Transparent"/>

                                <Label Text="{Binding taskDaysLeft}" Grid.Column="1" BackgroundColor="Transparent"/>

                                <Button ImageSource="ic_fluent_options_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}"
                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskOptionsCommand}" CommandParameter="{Binding .}"/>

                            </Grid>

                        </Frame>

                    </DataTemplate>

                </CollectionView.ItemTemplate>

            </CollectionView>

            <!--Frame that Holds the New Task Button-->
            <Frame BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10" Grid.Row="4" Grid.Column="1" >

                <Label Text="New Task" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1"/>

                <Frame.GestureRecognizers>

                    <TapGestureRecognizer Command="{Binding NewTaskCommand}"/>

                </Frame.GestureRecognizers>

            </Frame>

        </Grid>

    </ScrollView>

</ContentPage>