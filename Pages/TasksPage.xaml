<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HonorsApplication_II.Pages.Tasks"
             xmlns:viewmodel="clr-namespace:HonorsApplication_II.ViewModels"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:models="clr-namespace:HonorsApplication_II.ProgramClasses"
             x:DataType="viewmodel:TasksViewModel"
             Title="{Binding CurrentProject.projectName}">


    <RefreshView IsRefreshing="{Binding IsRefreshing}" Command="{Binding RefreshCommand}">


        <!-- Allows the user to Scroll Form this point -->
        <ScrollView HorizontalOptions="Center">

            <!--Grid that holds Frames/CollectionViews in place-->
            <Grid 
            RowDefinitions="Auto,Auto,Auto,Auto,Auto,Auto,*,Auto,Auto"
            ColumnDefinitions=".01*, .98*, .01*" 
            Padding="5"
            RowSpacing="5"
            ColumnSpacing="10">


                <Frame Grid.Column="1" Grid.Row="0" BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10" HeightRequest="70" >

                    <Grid
                        ColumnDefinitions=".1*,.8*,.1*"
                        Padding="5"
                        ColumnSpacing="5">

                        <Label Text="{Binding DoneTasks.Count}"  BackgroundColor="Transparent" Grid.Column="0" FontAttributes="Bold" FontSize="Micro"/>

                        <Label Text="Done"  HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1" FontAttributes="Bold" FontSize="Micro"/>

                        <Button ImageSource="ic_fluent_info_24_filled.svg" Grid.Column="2"  HorizontalOptions="Center" BackgroundColor="{AppThemeBinding Dark=White, Light=White}" Command="{Binding DoneInfoCommand}" MaximumHeightRequest="25"/>

                    </Grid>

                    <!--GestserReconizer that tells when something was dropped over it-->
                    <Frame.GestureRecognizers>
                        <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="Done"/>
                        <TapGestureRecognizer Command="{Binding DoneTasksHideCommand}"/>

                    </Frame.GestureRecognizers>

                </Frame>

                <!--CollectionView that displays all the "Doing"-->
                <CollectionView ItemsSource="{Binding DoneTasks}" Grid.Column="1" Grid.Row="1" CanReorderItems="True" IsVisible="{Binding DoneHidden}" Margin="3" HorizontalOptions="Center">

                    <!--Outlines the template used to display the tasks-->
                    <CollectionView.ItemTemplate>

                        <DataTemplate x:DataType="models:Task">

                            <Frame Padding="10,5" BackgroundColor="Transparent" BorderColor="LightGrey" Margin="1">

                                <!--GestureResconisers to set the what happens if the Frame is Dragged/Dropped or Tapped on-->
                                <Frame.GestureRecognizers>

                                    <DragGestureRecognizer CanDrag="True" 
                                       DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedCommand}" 
                                       DragStartingCommandParameter="{Binding .}"
                                       />

                                    <DropGestureRecognizer AllowDrop="True" 
                                       DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedOverCommand}"
                                       DropCommandParameter="{Binding .}"
                                       />

                                    <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskPressedCommand}"
                                      CommandParameter="{Binding .}"/>

                                </Frame.GestureRecognizers>

                                <!--Grid that displays all the Data of the task-->
                                <Grid 
                                    RowDefinitions="Auto"
                                    ColumnDefinitions=".1*,.8*,.1*"
                                    Padding="1"
                                    RowSpacing="1"
                                    ColumnSpacing="5">

                                    <Label Text="{Binding taskName}" FontAttributes="Bold" BackgroundColor="Transparent" Grid.Column="1" HorizontalOptions="Center"/>

                                </Grid>

                            </Frame>

                        </DataTemplate>

                    </CollectionView.ItemTemplate>

                </CollectionView>

                <!--Frame that holds the "Doing" Header-->
                <Frame Grid.Column="1" Grid.Row="2" BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10" HeightRequest="70">

                    <Grid
                    ColumnDefinitions=".1*,.8*,.1*"
                    Padding="5"
                    ColumnSpacing="5">

                        <Label Text="{Binding DoingTasks.Count}" VerticalOptions="Center" BackgroundColor="Transparent" Grid.Column="0" FontAttributes="Bold" FontSize="Micro"/>
                        
                        <Label Text="Doing" VerticalOptions="Center" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1" FontAttributes="Bold" FontSize="Micro"/>

                        <Button ImageSource="ic_fluent_info_24_filled.svg" Grid.Column="2" VerticalOptions="Center" HorizontalOptions="Center" BackgroundColor="{AppThemeBinding Dark=White, Light=White}" Command="{Binding DoingInfoCommand}" MaximumHeightRequest="25"/>

                    </Grid>

                    <!--GestserReconizer that tells when something was dropped over it-->
                    <Frame.GestureRecognizers>
                        <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="Doing"/>
                        <TapGestureRecognizer Command="{Binding DoingTasksHideCommand}"/>
                    </Frame.GestureRecognizers>

                </Frame>

                <!--CollectionView that displays all the "Doing"-->
                <CollectionView ItemsSource="{Binding DoingTasks}" Grid.Column="1" Grid.Row="3" CanReorderItems="True" Margin="3" HorizontalOptions="Center">

                    <!--Outlines the template used to display the tasks-->
                    <CollectionView.ItemTemplate>


                        <DataTemplate x:DataType="models:Task">

                            <Frame Padding="10,5" BackgroundColor="Transparent" Margin="1">

                                <!--GestureResconisers to set the what happens if the Frame is Dragged/Dropped or Tapped on-->
                                <Frame.GestureRecognizers>

                                    <DragGestureRecognizer CanDrag="True" 
                                                       DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedCommand}" 
                                                       DragStartingCommandParameter="{Binding .}"
                                                       />

                                    <DropGestureRecognizer AllowDrop="True" 
                                                       DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedOverCommand}"
                                                       DropCommandParameter="{Binding .}"
                                                       />

                                    <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskPressedCommand}"
                                                      CommandParameter="{Binding .}"/>

                                </Frame.GestureRecognizers>

                                <!--Triggers that change the colour of the background based on the taskDeadlineColour Value-->
                                <Frame.Triggers>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Red">
                                        <Setter Property="BackgroundColor" Value="Red"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Yellow">
                                        <Setter Property="BackgroundColor" Value="Orange"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Green">
                                        <Setter Property="BackgroundColor" Value="Green"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="None">
                                        <Setter Property="BackgroundColor" Value="Transparent"/>
                                        <Setter Property="BorderColor" Value="LightGrey"/>
                                    </DataTrigger>


                                </Frame.Triggers>

                                <!--Grid that displays all the Data of the task-->
                                <Grid 
                                    RowDefinitions="Auto"
                                    ColumnDefinitions=".4*,.45*,.15*"
                                    Padding="5"
                                    RowSpacing="1"
                                    ColumnSpacing="5">

                                    <Label Text="{Binding taskName}" FontAttributes="Bold" BackgroundColor="Transparent"/>

                                    <Label Text="{Binding taskDaysLeft}" Grid.Column="1" BackgroundColor="Transparent"/>

                                    <Button ImageSource="ic_fluent_options_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}"
                                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskOptionsCommand}" CommandParameter="{Binding .}" HeightRequest="30"/>

                                </Grid>

                            </Frame>

                        </DataTemplate>

                    </CollectionView.ItemTemplate>

                </CollectionView>

                <!--Frame that holds the "To-Do" Header-->
                <Frame Grid.Column="1" Grid.Row="4" BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10" HeightRequest="70">

                    <Grid
                    ColumnDefinitions=".1*,.8*,.1*"
                    Padding="5"
                    ColumnSpacing="5">

                        <Label Text="{Binding TodoTasks.Count}" VerticalOptions="Center" BackgroundColor="Transparent" Grid.Column="0" FontAttributes="Bold" FontSize="Micro"/>
                        
                        <Label Text="To-Do" VerticalOptions="Center" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1" FontAttributes="Bold" FontSize="Micro"/>

                        <Button ImageSource="ic_fluent_info_24_filled.svg" Grid.Column="2" VerticalOptions="Center" HorizontalOptions="Center" BackgroundColor="{AppThemeBinding Dark=White, Light=White}" Command="{Binding ToDoInfoCommand}" MaximumHeightRequest="25"/>

                    </Grid>
                    <!--GestserReconizer that tells when something was dropped over it-->
                    <Frame.GestureRecognizers>
                        <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="To-Do"/>
                        <TapGestureRecognizer Command="{Binding To_DoTasksHideCommand}"/>
                    </Frame.GestureRecognizers>

                </Frame>

                <!--GestserReconizer that tells when something was dropped over it-->
                <CollectionView ItemsSource="{Binding TodoTasks}" Grid.Column="1" Grid.Row="5" CanReorderItems="True"  Margin="5" HorizontalOptions="Center">


                    <CollectionView.ItemTemplate>


                        <DataTemplate x:DataType="models:Task">

                            <Frame Padding="10,5" BackgroundColor="Transparent" Margin="1">

                                <!--GestureResconisers to set the what happens if the Frame is Dragged/Dropped or Tapped on-->
                                <Frame.GestureRecognizers>

                                    <DragGestureRecognizer CanDrag="True" 
                                   DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedCommand}" 
                                   DragStartingCommandParameter="{Binding .}"
                                   />

                                    <DropGestureRecognizer AllowDrop="True" 
                                   DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskDraggedOverCommand}"
                                   DropCommandParameter="{Binding .}"
                                   />

                                    <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskPressedCommand}"
                                  CommandParameter="{Binding .}"/>

                                </Frame.GestureRecognizers>

                                <!--Triggers that change the colour of the background based on the taskDeadlineColour Value-->
                                <Frame.Triggers>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Red">
                                        <Setter Property="BackgroundColor" Value="Red"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Yellow">
                                        <Setter Property="BackgroundColor" Value="Orange"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="Green">
                                        <Setter Property="BackgroundColor" Value="Green"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Frame" Binding="{Binding taskTimeDeadlineColour}" Value="None">
                                        <Setter Property="BackgroundColor" Value="Transparent"/>
                                        <Setter Property="BorderColor" Value="LightGray"/>
                                    </DataTrigger>


                                </Frame.Triggers>

                                <!--Grid that displays all the Data of the task-->
                                <Grid 
                                RowDefinitions="Auto"
                                ColumnDefinitions=".4*,.45*,.15*"
                                Padding="1"
                                RowSpacing="1"
                                ColumnSpacing="5">

                                    <Label Text="{Binding taskName}" FontAttributes="Bold" BackgroundColor="Transparent"/>

                                    <Label Text="{Binding taskDaysLeft}" Grid.Column="1" BackgroundColor="Transparent" VerticalOptions="Center" HorizontalOptions="Center"/>

                                    <Button ImageSource="ic_fluent_options_24_filled.svg" Grid.Column="2" HorizontalOptions="End" BackgroundColor="{AppThemeBinding Dark=White, Light=White}"
                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:TasksViewModel}}, Path=TaskOptionsCommand}" CommandParameter="{Binding .}" HeightRequest="30"/>

                                </Grid>

                            </Frame>

                        </DataTemplate>

                    </CollectionView.ItemTemplate>

                </CollectionView>

                <Frame BackgroundColor="Red" BorderColor="LightGrey" CornerRadius="10" Grid.Row="7" Grid.Column="1" IsVisible="{Binding DeleteHidden}" >

                    <Label Text="Delete Task" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1"/>

                    <!--GestserReconizer that tells when something was dropped over it-->
                    <Frame.GestureRecognizers>
                        <DropGestureRecognizer DropCommand="{Binding TaskDraggedOverCatagoryCommand}" DropCommandParameter="Delete"/>
                    </Frame.GestureRecognizers>
                    
                </Frame>
                
                <!--Frame that Holds the New Task Button-->
                <Frame BackgroundColor="Transparent" BorderColor="LightGrey" CornerRadius="10" Grid.Row="8" Grid.Column="1" >

                    <Label Text="New Task" HorizontalOptions="Center" BackgroundColor="Transparent" Grid.Column="1"/>

                    <Frame.GestureRecognizers>

                        <TapGestureRecognizer Command="{Binding NewTaskCommand}"/>

                    </Frame.GestureRecognizers>

                </Frame>

            </Grid>

        </ScrollView>

    </RefreshView>

</ContentPage>